rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is an admin
    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/user_profiles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/user_profiles/$(request.auth.uid)).data.email == "lucatrinca.uk@gmail.com";
    }

    // Rules for the main board game collection
    match /boardgames_collection/{gameId} {
      allow read: if true;
      allow create, delete: if isAdmin();

      allow update: if isAdmin() ||
                       (request.auth != null &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                           'favoritedByUserIds', 'favoriteCount',
                           'playlistedByUserIds',
                           'morchiaByUserIds', 'morchiaCount',
                           'overallAverageRating', 'voteCount'
                         ])
                       );

      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      }

      match /plays_lctr01/{playId} {
        allow read: if true;
        allow write: if isAdmin();
      }
    }

    // Rules for user profiles
    match /user_profiles/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false;

      match /earned_badges/{badgeId} {
        allow read: if true;
        allow write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Rule for collection group 'reviews' to allow count queries by authenticated users
    match /{path=**}/reviews/{reviewId} {
      // Grant read access needed for individual review reads and listing.
      // Grant list access needed for collection group queries like count().
      allow get, list: if request.auth != null;
    }

    // Rules for the collection group 'plays_lctr01'
    match /{path=**}/plays_lctr01/{playId} {
      allow read: if true; // Allows getLastPlayedGameAction to work for anyone
    }
  }
}
